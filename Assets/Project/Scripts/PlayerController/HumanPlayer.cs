using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;

using CardInfo;
using TerrainScanning;
using UI;

namespace GameLogic
{
    public class HumanPlayer : Player
    {
        #region Public Property
        /// <summary>
        /// Reference of CardInfo Reader
        /// </summary>
        public CardDB myDecks;
        /// <summary>
        /// Reference of the Battlefield
        /// </summary>
        //public BattleFieldManager battleFieldManager;
        /// <summary>
        /// A Public Interface to get Player states
        /// </summary>
        public PlayerStates State { get { return myState; } }
        /// <summary>
        /// Reference of the MouseController
        /// </summary>
        //public MouseController mouse;
        ///<summary>
        /// Reference of CardUIManager
        ///</summary>
        public CardUIManager CardUIManager;
        #endregion

        #region Private Variable
        /// <summary>
        /// myState record the states of the player
        /// </summary>
        private PlayerStates myState = PlayerStates.Init;
        /// <summary>
        /// Only Init when game start
        /// </summary>
        private bool _bInit = false;
        /// <summary>
        /// Store the time when this state began
        /// Reset by ChangeState Function
        /// </summary>
        private float stateBeginTime;
        ///<summary>
        /// A random card generated by database
        ///</summary>
        private Card CardToUsed;
        ///<summary>
        /// A random hex index to place new monster
        ///</summary>
        private int HexToPlaceIndex;
        #endregion

        #region Unreal Function
        /// <summary>
        /// Start is called before the first frame update
        /// Inherited from PlayerFSM
        /// </summary>
        public void Start()
        {
            if (!_bInit)
            {
                ChangeState(PlayerStates.Init);
                _bInit = true;
            }
            //Event Init
            if (Event_PlayerTurnStart == null)
            {
                Event_PlayerTurnStart = new UnityEvent();
            }
            Event_PlayerTurnStart.AddListener(PlayerTurnStartInvoke);
            if (Event_ScanFinished == null)
            {
                Event_ScanFinished = new UnityEvent();
            }
            Event_ScanFinished.AddListener(ScanFinishedInvoke);
            PlayedCard += PlayedCardInvoked;
            //mouse.ClickOnHex += ClickOnHexInvoked;
            //mouse.ClickOnCard += ClickOnCardInvoked;
        }

        /// <summary>
        /// Update is called once per frame
        /// Non-inherited from PlayerFSM
        /// </summary>
        public void Update()
        {
            float nowTime = Time.time;
            switch (myState)
            {
                case (PlayerStates.Init):
                    //Init For AI Player
                    ChangeState(PlayerStates.WaitForStart);
                    break;
                case (PlayerStates.WaitForStart):
                    break;
                case (PlayerStates.Main_Phase):
                    // if (nowTime - stateBeginTime < 1) break; //Wait 2 seconds.
                    // Debug.Log("Now Is Human Player Main_Phase, Human Player will randomly choose A card.");
                    // CardToUsed = myDecks.GetRandomCard();
                    // Debug.LogFormat("Now AI want to use {0}, ATK: {1}, HP: {2}, SPEED: {3}, SPECIAL EFFECT: {4}", CardToUsed.CardName, CardToUsed.Attack, CardToUsed.HP, CardToUsed.Speed, CardToUsed.SpecialEffect);
                    // ChangeState(PlayerStates.Confirm_Phase);
                    Debug.Log("Now Is Human Player Main_Phase, Human Player will choose A card.");
                    CardUIManager.ShowCardUI();
                    break;
                case (PlayerStates.Confirm_Phase):
                    //Using Mouse to choose Hex
                    break;
                case (PlayerStates.Spawn_Phase):
                    if (nowTime - stateBeginTime < 1) break;
                    PlayedCard(PlayerId, CardToUsed.id, HexToPlaceIndex);
                    ChangeState(PlayerStates.End);
                    break;
                case (PlayerStates.End):
                    Debug.Log("Now AI is in the end step, return the control back to Main Logic");
                    PlayerEnd(PlayerId);
                    ChangeState(PlayerStates.WaitForStart);
                    break;
                default:
                    Debug.Log("HumanPlayerFSM_Update(): Should Not Go to Default State.");
                    break;
            }
        }
        #endregion

        #region Private Function
        /// <summary>
        /// Set myState to dstStates
        /// Set stateBeginTime to current Time
        /// </summary>
        /// <param name="dstStates">
        /// Set myState to this dstStates
        /// </param>
        private void ChangeState(PlayerStates dstStates)
        {
            Debug.LogFormat("HumanPlayer {0}: Now Change to {1}", PlayerId, dstStates.ToString());
            myState = dstStates;
            stateBeginTime = Time.time;
        }
        #endregion

        #region Event Handler
        /// <summary>
        /// Call this function when Event_PlayerTurnStart invoke
        /// Change User state from WaitForStart to Main_Phase
        /// </summary>
        private void PlayerTurnStartInvoke()
        {
            if (myState == PlayerStates.WaitForStart)
            {
                ChangeState(PlayerStates.Main_Phase);
            }
            else
            {
                Debug.LogErrorFormat("HumanPlayer {0} Error: Now State is {1} cannot Change to Main_Phase.", PlayerId, State.ToString());
            }
        }
        /// <summary>
        /// Call this function when Event_ScanFished invoke
        /// Change User state from Init to WaitForStart
        /// </summary>
        private void ScanFinishedInvoke()
        {
            if (myState == PlayerStates.Init)
            {
                ChangeState(PlayerStates.WaitForStart);
            }
            else
            {
                Debug.LogErrorFormat("HumanPlayer {0} Error: Now State is {1} cannot Change to Wait_For_Start.", PlayerId, State.ToString());
            }
        }

        /// <summary>
        /// Invoked when the player is playing card
        /// </summary>
        /// <param name="PlayerId">The player id of the played card.</param>
        /// <param name="CardIndex">The played card index</param>
        /// <param name="HexIndex">The hex that card has been place on</param>
        private void PlayedCardInvoked(int PlayerId, int CardIndex, int HexIndex)
        {
            Debug.LogFormat("HumanPlayer {0} playing card {1} in hex {2}", PlayerId, CardIndex, HexIndex);
            return;
        }

        /// <summary>
        /// This function will call when Mouse click on a Hex
        /// </summary>
        /// <param name="HexIndex">The Chosen Hex Index</param>
        private void ClickOnHexInvoked(int HexIndex)
        {
            if(myState==PlayerStates.Confirm_Phase)
            {
                HexToPlaceIndex = HexIndex;
            }
            ChangeState(PlayerStates.Spawn_Phase);
            return;
        }

        /// <summary>
        /// This function will call when Mouse click on a Card
        /// </summary>
        /// <param name="CardName">The Chosen Card Name</param>
        private void ClickOnCardInvoked(string CardName)
        {
            if(myState==PlayerStates.Main_Phase)
            {
                CardToUsed = myDecks.GetCard(CardName);
                CardUIManager.HideCardUI();
                Debug.LogFormat("Now Player want to use {0}, ATK: {1}, HP: {2}, SPEED: {3}, SPECIAL EFFECT: {4}", CardToUsed.CardName, CardToUsed.Attack, CardToUsed.HP, CardToUsed.Speed, CardToUsed.SpecialEffect);
            }
            ChangeState(PlayerStates.Confirm_Phase);
            return;
        }
        #endregion
    }
}